// Copyright 2021-present The Atlas Authors. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

package atlasaction

import (
	"bufio"
	"bytes"
	"context"
	"fmt"
	"io"
	"strings"
	"time"

	"ariga.io/atlas/atlasexec"
)

// Copilot runs the GitHub Action for "ariga/atlas-action/copilot".
func (a *Actions) Copilot(ctx context.Context) error {
	tc, err := a.GetTriggerContext(ctx)
	if err != nil {
		return err
	}
	c, err := tc.SCMClient()
	if err != nil {
		return err
	}
	s, err := c.CopilotSession(ctx, tc)
	if err != nil {
		return err
	}
	if s != "" {
		a.Infof("continue session %s", s)
	}
	switch {
	case a.GetBoolInput("gen-test") && tc.PullRequest != nil:
		// Atlas Copilot is configured to generate test cases.
		cp, err := a.copilot(ctx, &atlasexec.CopilotParams{
			Session: s,
			Prompt:  "Generate missing test cases for my schema.",
			FSWrite: "**",
		})
		if err != nil {
			a.SetOutput("error", err.Error())
			return err
		}
		var (
			b   = fmt.Sprintf("atlas-generated-%s", time.Now().Format("20060102150405"))
			msg = "add schema test generated by atlas"
		)
		if _, err := a.exec(ctx, "git", "switch", "-c", b); err != nil {
			return fmt.Errorf("failed to create branch: %w", err)
		}
		if err = a.commitAndPush(ctx, b, msg); err != nil {
			return err
		}
		body := fmt.Sprintf(`This PR was generated by Atlas Copilot.
	
It adds automatically generated schema tests for changes introduced in %s.
	
If you have any questions or want me to edit the test, you can comment on this PR and mention me with /atlas.`, tc.PullRequest.URL)
		pr, err := c.CreatePullRequest(ctx, b, tc.Branch, msg, body)
		if err != nil {
			return fmt.Errorf("failed to create pull request: %w", err)
		}
		if err = c.CommentCopilot(ctx, pr.Number, &Copilot{
			Session:  cp.Session,
			Response: cp.Response,
		}); err != nil {
			return fmt.Errorf("failed to create pull request comment: %w", err)
		}
		return c.CommentCopilot(ctx, tc.PullRequest.Number, &Copilot{
			Session: cp.Session,
			Response: fmt.Sprintf(
				"I added the generated test cases to a new branch and created a pull request for you [here](%s). You can review the changes and merge them if you are satisfied.",
				pr.URL,
			),
		})
	// Atlas Copilot will react to comments that start with /atlas.
	case tc.Comment != nil && strings.ToLower(tc.Comment.Body[:6]) == "/atlas":
		// We need to know the PR's head branch to commit the changes.
		pr, err := c.PullRequest(ctx, tc.Comment.Number)
		if err != nil {
			return err
		}
		a.Infof("PR is %s", pr.Ref)
		if _, err = a.exec(ctx, "git", "fetch", "origin"); err != nil {
			return fmt.Errorf("failed to fetch origin: %w", err)
		}
		if _, err = a.exec(ctx, "git", "switch", pr.Ref); err != nil {
			return fmt.Errorf("failed to create branch: %w", err)
		}
		cp, err := a.copilot(ctx, &atlasexec.CopilotParams{
			Session: s,
			Prompt:  tc.Comment.Body,
			FSWrite: "**",
		})
		if err != nil {
			a.SetOutput("error", err.Error())
			return err
		}
		if err := a.commitAndPush(ctx, pr.Ref, "user feedback"); err != nil {
			return err
		}
		return c.CommentCopilot(ctx, tc.Comment.Number, cp)
	}
	return nil
}

// Stage and commit all changes in the current workspace.
// If branch is not empty, the commit will be pushed to that branch.
func (a *Actions) commitAndPush(ctx context.Context, branch, msg string) error {
	if _, err := a.exec(ctx, "git", "config", "--local", "user.name", "github-actions[bot]"); err != nil {
		return fmt.Errorf("failed to set git user name: %w", err)
	}
	if _, err := a.exec(ctx, "git", "config", "--local", "user.email", "github-actions[bot]@users.noreply.github.com"); err != nil {
		return fmt.Errorf("failed to set git user email: %w", err)
	}
	if _, err := a.exec(ctx, "git", "add", "."); err != nil {
		return fmt.Errorf("failed to stage changes: %w", err)
	}
	if _, err := a.exec(ctx, "git", "commit", "-m", msg); err != nil {
		return fmt.Errorf("failed to commit changes: %w", err)
	}
	if _, err := a.exec(ctx, "git", "push", "origin", branch); err != nil {
		return fmt.Errorf("failed to push changes: %w", err)
	}
	return nil
}

// copilot runs the copilot one shot command. It streams the output in real-time using the action logs.
// Once the command is done, it returns the accumulated Copilot response without tool call logs.
func (a *Actions) copilot(ctx context.Context, p *atlasexec.CopilotParams) (*Copilot, error) {
	st, err := a.Atlas.CopilotStream(ctx, p)
	if err != nil {
		return nil, err
	}
	var (
		s        string
		m        *atlasexec.CopilotMessage
		comment  bytes.Buffer
		out, log = io.Pipe()
		scan     = bufio.NewScanner(out)
		both     = io.MultiWriter(&comment, log)
	)
	defer log.Close()
	go func() {
		for scan.Scan() {
			a.Infof(scan.Text())
		}
	}()
	for st.Next() {
		m, err = st.Current()
		if err != nil {
			return nil, err
		}
		if s == "" {
			s = m.SessionID
		}
		switch m.Type {
		case atlasexec.CopilotTypeMessage:
			both.Write([]byte(m.Content))
		case atlasexec.CopilotTypeToolCall:
			fmt.Fprintf(log, "call: %q\n", m.ToolCall.Function)
		case atlasexec.CopilotTypeToolOutput:
			log.Write([]byte(m.ToolOutput.Content + "\n"))
		}
	}
	if err = st.Err(); err != nil {
		return nil, err
	}
	return &Copilot{
		Session:  s,
		Prompt:   p.Prompt,
		Response: comment.String(),
	}, nil
}
