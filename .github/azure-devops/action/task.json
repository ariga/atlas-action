{
  "$schema": "https://raw.githubusercontent.com/Microsoft/azure-pipelines-task-lib/master/tasks.schema.json",
  "id": "9f96e670-85cc-4764-b83f-9824a9747edd",
  "author": "ariga",
  "name": "AtlasAction",
  "friendlyName": "Atlas Action",
  "description": "Atlas Action for Azure DevOps",
  "helpMarkDown": "",
  "category": "Azure Pipelines",
  "version": {
    "Major": 0,
    "Minor": 0,
    "Patch": 0
  },
  "execution": {
    "Node": {
      "target": "shim.js",
      "argumentFormat": ""
    },
    "Node10": {
      "target": "shim.js",
      "argumentFormat": ""
    },
    "Node16": {
      "target": "shim.js",
      "argumentFormat": ""
    },
    "Node20_1": {
      "target": "shim.js",
      "argumentFormat": ""
    }
  },
  "instanceNameFormat": "Atlas Action: $(action)",
  "inputs": [
    {
      "type": "pickList",
      "label": "Action",
      "helpMarkDown": "Select an action to use at this job.",
      "required": true,
      "name": "action",
      "options": {
        "copilot": "Atlas Copilot",
        "migrate apply": "Migrate Apply",
        "migrate autorebase": "Migrate Auto Rebase",
        "migrate diff": "Migrate Diff",
        "migrate down": "Migrate Down",
        "migrate lint": "Migrate Lint",
        "migrate push": "Migrate Push",
        "migrate test": "Migrate Test",
        "monitor schema": "Atlas Schema Monitoring",
        "schema apply": "Schema Apply",
        "schema lint": "Schema Lint",
        "schema plan": "Schema Plan",
        "schema plan approve": "Schema Plan Approve",
        "schema push": "Schema Push",
        "schema test": "Schema Test"
      }
    },
    {
      "type": "boolean",
      "label": "Allow dirty state",
      "helpMarkDown": "Allow working on a non-clean database.",
      "name": "allow_dirty",
      "visibleRule": "action == migrate apply"
    },
    {
      "type": "int",
      "label": "Num of migrations",
      "helpMarkDown": "The maximum number of migration files to apply. Default is all.",
      "name": "amount",
      "visibleRule": "action == migrate apply || action == migrate down"
    },
    {
      "type": "boolean",
      "label": "Auto approve",
      "helpMarkDown": "Automatically approve and apply changes. Either \"true\" or \"false\".",
      "name": "auto_approve",
      "visibleRule": "action == schema apply"
    },
    {
      "type": "string",
      "label": "Base branch",
      "helpMarkDown": "The base branch to rebase the migration directory onto. Default to the default branch of the repository.\n",
      "name": "base_branch",
      "visibleRule": "action == migrate autorebase"
    },
    {
      "type": "string",
      "label": "Atlas Cloud token",
      "helpMarkDown": "The token that is used to connect to Atlas Cloud (should be passed as a secret).",
      "name": "cloud_token",
      "visibleRule": "action == monitor schema"
    },
    {
      "type": "string",
      "label": "Description",
      "helpMarkDown": "The description of the schema.",
      "name": "description",
      "visibleRule": "action == schema push"
    },
    {
      "type": "string",
      "label": "Migration directory",
      "helpMarkDown": "The URL of the migration directory to apply. For example: `atlas://dir-name` for cloud\nbased directories or `file://migrations` for local ones.\n",
      "name": "dir",
      "visibleRule": "action == migrate apply || action == migrate autorebase || action == migrate diff || action == migrate down || action == migrate lint || action == migrate push || action == migrate test"
    },
    {
      "type": "string",
      "label": "Directory name",
      "helpMarkDown": "The name (slug) of the project in Atlas Cloud.\n",
      "name": "dir_name",
      "visibleRule": "action == migrate lint || action == migrate push"
    },
    {
      "type": "boolean",
      "label": "Dry run",
      "helpMarkDown": "Print SQL without executing it. Either \"true\" or \"false\".",
      "name": "dry_run",
      "visibleRule": "action == migrate apply || action == schema apply"
    },
    {
      "type": "multiLine",
      "label": "Exclude patterns",
      "helpMarkDown": "List of glob patterns used to select which resources to filter in inspection\nsee: https://atlasgo.io/declarative/inspect#exclude-schemas\n",
      "name": "exclude",
      "visibleRule": "action == monitor schema || action == schema apply || action == schema plan || action == schema plan approve"
    },
    {
      "type": "multiLine",
      "label": "Current schema URL",
      "helpMarkDown": "URL(s) of the current schema state.\n",
      "name": "from",
      "visibleRule": "action == schema plan || action == schema plan approve"
    },
    {
      "type": "multiLine",
      "label": "Include patterns",
      "helpMarkDown": "List of glob patterns used to select which resources to keep in inspection\nsee: https://atlasgo.io/declarative/inspect#include-schemas\n",
      "name": "include",
      "visibleRule": "action == schema apply || action == schema plan || action == schema plan approve"
    },
    {
      "type": "boolean",
      "label": "Push the `latest` tag",
      "helpMarkDown": "If true, push also to the `latest` tag.\n",
      "name": "latest",
      "visibleRule": "action == migrate push || action == schema push"
    },
    {
      "type": "pickList",
      "options": {
        "ALWAYS":"ALWAYS","ERROR":"ERROR","WARNING":"WARNING"
      },
      "label": "Lint review policy",
      "helpMarkDown": "Automatically generate an approval plan before applying changes. Options are \"ALWAYS\", \"ERROR\" or \"WARNING\".\nUse \"ALWAYS\" to generate a plan for every apply, or \"WARNING\" and \"ERROR\" to generate a plan only based on review policy.\n",
      "name": "lint_review",
      "visibleRule": "action == schema apply"
    },
    {
      "type": "string",
      "label": "Plan name",
      "helpMarkDown": "The name of the plan. By default, Atlas will generate a name based on the schema changes.\n",
      "name": "name",
      "visibleRule": "action == schema plan"
    },
    {
      "type": "multiLine",
      "label": "Test paths",
      "helpMarkDown": "List of directories containing test files.\n",
      "name": "paths",
      "visibleRule": "action == migrate test || action == schema test"
    },
    {
      "type": "string",
      "label": "Plan URL",
      "helpMarkDown": "The plan to apply. For example, `atlas://\u003cschema\u003e/plans/\u003cid\u003e`.\n",
      "name": "plan",
      "visibleRule": "action == schema apply || action == schema plan approve"
    },
    {
      "type": "string",
      "label": "Git remote",
      "helpMarkDown": "The remote to fetch from. Defaults to `origin`.\n",
      "name": "remote",
      "visibleRule": "action == migrate autorebase || action == migrate diff"
    },
    {
      "type": "string",
      "label": "Revisions schema",
      "helpMarkDown": "The name of the schema containing the revisions table.",
      "name": "revisions_schema",
      "visibleRule": "action == migrate apply || action == migrate down || action == migrate lint || action == migrate push || action == migrate test"
    },
    {
      "type": "string",
      "label": "Test filter",
      "helpMarkDown": "Filter tests to run by regexp.\nFor example, `^test_.*` will only run tests that start with `test_`.\nDefault is to run all tests.\n",
      "name": "run",
      "visibleRule": "action == migrate test || action == schema test"
    },
    {
      "type": "multiLine",
      "label": "Database schema(s)",
      "helpMarkDown": "List of database schema(s). For example: `public`.\n",
      "name": "schema",
      "visibleRule": "action == schema apply || action == schema lint || action == schema plan || action == schema plan approve || action == schema push"
    },
    {
      "type": "string",
      "label": "Schema name",
      "helpMarkDown": "The name (slug) of the schema repository in Atlas Registry.\nRead more in Atlas website: https://atlasgo.io/registry.\n",
      "name": "schema_name",
      "visibleRule": "action == schema plan || action == schema plan approve || action == schema push"
    },
    {
      "type": "multiLine",
      "label": "Include schemas",
      "helpMarkDown": "List of database schemas to include (by default includes all schemas). see: https://atlasgo.io/declarative/inspect#inspect-multiple-schemas",
      "name": "schemas",
      "visibleRule": "action == monitor schema"
    },
    {
      "type": "string",
      "label": "Database slug",
      "helpMarkDown": "Optional unique identifier for the database server.",
      "name": "slug",
      "visibleRule": "action == monitor schema"
    },
    {
      "type": "string",
      "label": "Tag",
      "helpMarkDown": "The tag of migrations to used as base for linting. By default, the `latest` tag is used.\n",
      "name": "tag",
      "visibleRule": "action == migrate lint || action == migrate push || action == schema push"
    },
    {
      "type": "string",
      "label": "Desired state URL",
      "helpMarkDown": "The URL of the desired state.\n",
      "name": "to",
      "visibleRule": "action == migrate diff || action == schema apply || action == schema plan || action == schema plan approve"
    },
    {
      "type": "string",
      "label": "Revert to tag",
      "helpMarkDown": "The tag to revert to. Mutually exclusive with `amount` and `to-version`.",
      "name": "to_tag",
      "visibleRule": "action == migrate down"
    },
    {
      "type": "string",
      "label": "Revert to version",
      "helpMarkDown": "The version to revert to. Mutually exclusive with `amount` and `to-tag`.",
      "name": "to_version",
      "visibleRule": "action == migrate down"
    },
    {
      "type": "pickList",
      "options": {
        "file":"file","all":"all","none":"none"
      },
      "label": "Transaction mode",
      "helpMarkDown": "Transaction mode to use. Either \"file\", \"all\", or \"none\". Default is \"file\".\n",
      "name": "tx_mode",
      "visibleRule": "action == migrate apply || action == schema apply"
    },
    {
      "type": "string",
      "label": "Target database URL",
      "helpMarkDown": "The URL of the target database. For example: `mysql://root:pass@localhost:3306/dev`.\n",
      "name": "url",
      "visibleRule": "action == migrate apply || action == migrate down || action == monitor schema || action == schema apply || action == schema lint || action == schema push || action == schema test"
    },
    {
      "type": "string",
      "label": "Version",
      "helpMarkDown": "The version of the schema.",
      "name": "version",
      "visibleRule": "action == schema push"
    },
    {
      "type": "string",
      "label": "Wait interval",
      "helpMarkDown": "Time in seconds between different migrate down attempts.",
      "name": "wait_interval",
      "visibleRule": "action == migrate down || action == schema apply"
    },
    {
      "type": "string",
      "label": "Wait timeout",
      "helpMarkDown": "Time after which no other retry attempt is made and the action exits.",
      "name": "wait_timeout",
      "visibleRule": "action == migrate down || action == schema apply"
    },
    {
      "type": "string",
      "label": "Working directory",
      "helpMarkDown": "Atlas working directory. Default is project root",
      "name": "working_directory",
      "visibleRule": "action == migrate apply || action == migrate autorebase || action == migrate diff || action == migrate down || action == migrate lint || action == migrate push || action == migrate test || action == schema apply || action == schema lint || action == schema plan || action == schema plan approve || action == schema push || action == schema test"
    },
    {
      "type": "string",
      "label": "Atlas config",
      "helpMarkDown": "The URL of the Atlas configuration file. By default, Atlas will look for a file\nnamed `atlas.hcl` in the current directory. For example, `file://config/atlas.hcl`.\nLearn more about [Atlas configuration files](https://atlasgo.io/atlas-schema/projects).\n",
      "name": "config",
      "visibleRule": "action == migrate apply || action == migrate diff || action == migrate down || action == migrate lint || action == migrate push || action == migrate test || action == monitor schema || action == schema apply || action == schema lint || action == schema plan || action == schema plan approve || action == schema push || action == schema test"
    },
    {
      "type": "string",
      "label": "Environment",
      "helpMarkDown": "The environment to use from the Atlas configuration file. For example, `dev`.\n",
      "name": "env",
      "visibleRule": "action == migrate apply || action == migrate diff || action == migrate down || action == migrate lint || action == migrate push || action == migrate test || action == monitor schema || action == schema apply || action == schema lint || action == schema plan || action == schema plan approve || action == schema push || action == schema test"
    },
    {
      "type": "multiLine",
      "label": "Variables",
      "helpMarkDown": "A JSON object containing variables to be used in the Atlas configuration file.\nFor example, `{\"var1\": \"value1\", \"var2\": \"value2\"}`.\n",
      "name": "vars",
      "visibleRule": "action == migrate apply || action == migrate diff || action == migrate down || action == migrate lint || action == migrate push || action == migrate test || action == schema apply || action == schema lint || action == schema plan || action == schema plan approve || action == schema push || action == schema test"
    },
    {
      "type": "string",
      "label": "Dev database URL",
      "helpMarkDown": "The URL of the dev-database to use for analysis. For example: `mysql://root:pass@localhost:3306/dev`.\nRead more about [dev-databases](https://atlasgo.io/concepts/dev-database).\n",
      "name": "dev_url",
      "visibleRule": "action == migrate diff || action == migrate down || action == migrate lint || action == migrate push || action == migrate test || action == schema apply || action == schema lint || action == schema plan || action == schema plan approve || action == schema push || action == schema test"
    },
    {
      "name": "githubConnection",
      "type": "connectedService:github:OAuth,PersonalAccessToken,InstallationToken,Token",
      "label": "GitHub connection (OAuth or PAT)",
      "defaultValue": "",
      "required": true,
      "helpMarkDown": "Specify the name of the GitHub service connection to use to connect to the GitHub repository. The connection must be based on a GitHub user's OAuth or a GitHub personal access token. Learn more about service connections [here](https://aka.ms/AA3am5s)."
    }
  ]
}
